import org.apache.tools.ant.filters.*

buildscript {
    repositories {
        jcenter()
        maven { url 'http://repo.spring.io/libs-snapshot' }
    }

    dependencies {
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:1.4.0.RELEASE'

        classpath 'org.liquibase:liquibase-gradle-plugin:1.2.1'
        classpath 'org.postgresql:postgresql:9.4.1209.jre7'
    }
}

plugins {
    id "com.moowork.node" version "0.13"
    id "io.spring.dependency-management" version "0.6.0.RELEASE"
}

allprojects {
    group = 'com.spring.web.demo'
    version = '1.0'

    task wrapper(type: Wrapper) {
        gradleVersion = '2.14'
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'io.spring.dependency-management'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    repositories {
        jcenter()
        maven { url 'http://repo.spring.io/libs-snapshot' }
    }

    dependencyManagement {
        imports {
            mavenBom 'org.springframework.boot:spring-boot-starter-parent:1.4.0.RELEASE'
        }
    }

    processResources {
        filesMatching('application.properties') {
            filter ReplaceTokens, tokens: [
                    'api.port'         : project.property('api.port')
            ]
        }
    }
}

project(':persistent') {
    apply plugin: 'org.liquibase.gradle'

    processResources {
        filesMatching('domain.properties') {
            filter ReplaceTokens, tokens: [
                    'database.driver'  : project.property('database.driver'),
                    'database.url'     : project.property('database.url'),
                    'database.username': project.property('database.username'),
                    'database.password': project.property('database.password')
            ]
        }
    }

    liquibase {
        activities {
            PROD {
                changeLogFile 'src/main/resources/liquibase/db.changelog-master.xml'
                url project.property('database.url')
                username project.property('database.username')
                password project.property('database.password')
                classpath "$projectDir"
            }
        }

        runList = 'PROD'
    }

    dependencies {
        compile 'org.springframework:spring-context-support'
        compile 'org.springframework.boot:spring-boot-starter-data-rest'
        compile 'org.springframework.boot:spring-boot-starter-data-jpa'

        compile 'org.hibernate:hibernate-entitymanager'
        compile 'org.hibernate:hibernate-ehcache'
        compile 'com.zaxxer:HikariCP'

        compile 'org.hsqldb:hsqldb'
        compile 'org.postgresql:postgresql:9.4.1209.jre7'

        compile 'com.fasterxml.jackson.core:jackson-annotations'
    }
}

project(':logic') {
    dependencies {
        compile project(':persistent')
        compile 'org.aspectj:aspectjweaver'
        compile 'org.mockito:mockito-core'

        compile 'org.hibernate:hibernate-validator'
        compile 'com.google.guava:guava:19.0'
        compile 'org.passay:passay:1.0'

        compile 'org.springframework.boot:spring-boot-starter-security'
    }
}

project(':api') {
    apply plugin: 'spring-boot'

    dependencies {
        compile project(':logic')
        compile 'org.springframework.boot:spring-boot-starter-web'

        testCompile 'org.springframework.boot:spring-boot-starter-test'
        testCompile 'junit:junit'

        compile 'com.mangofactory:swagger-springmvc:1.0.2'
    }
}

project(':web') {
    node {
        // Version of node to use.
        version = '4.2.3'

        // Version of npm to use.
        npmVersion = '2.14.7'

        // Base URL for fetching node distributions (change if you have a mirror).
        distBaseUrl = 'https://nodejs.org/dist'

        // If true, it will download node using above parameters.
        // If false, it will try to use globally installed node.
        download = true

        // Set the work directory for unpacking node
        workDir = file("${project.buildDir}/nodejs")

        // Set the work directory where node_modules should be located
        nodeModulesDir = file("${project.projectDir}")
    }
}